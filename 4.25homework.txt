```java
 /**
          作业1:
            1.将 byte [] by={65,67,68,97,98,101}  转换成字符串输出
            public class Test{
                static void main(String [] args){
                    byte [] by={65,67,68,97,98,101};
                    String str=new String(by);
                    System.out.println(str);
                }
            }

            将上诉字节数组  从指定的位置开始到结束转换成字符串输出
            char a[]=str.toCharArray();
            String str=new String(a,3);
            System.out.println(str);
            2.同样的自定义一个字符数组用字符串的方式输出
            char a[]="abcd";
             String str=new String(a);
                        System.out.println(str);
            3."abcdw" "ABCDw" 比较两个字符串是否相等  忽略大小写
            String str1="abcdw";
            String str2="ABCDw";
            if(str1.compareTo(str2)) System.out.println("相等");
            else System.out.println("不相等");
            4."c" 判断是否包含 "剑"
            String str="我是你的谁,我是你的剑";
            if(str.contains("剑"))System.out.println("包含");
            else System.out.println("不包含");


            5.第四题字符串判断是否以"我开头",判断是否以"剑"结尾
            if(str.startsWith("我"))System.out.println("以我开头");
            else System.println("不以我开头");
            if(str.endsWith("剑"))System.out.println("以剑结尾");
                        else System.println("不以剑结尾");

            6.String   str=""和 String  str2=null; 判断他们是否为空
             if(str1.isEmpty())System.out.println("字符串为空");
                        else System.println("字符串不为空");
             if(str2.isEmpty())System.out.println("字符串为空");
                        else System.println("字符串不为空");

            7.找到此字符串"我是你的小宝贝"的 "我" 进行输出
            String str="我是你的小宝贝";
            int i=str.indexOf("我");
                       System.out.println(str[i]);

            8.找出 "我是你的谁,我是你的剑" 里面的 "你" 第一次出现的位置
             String str="我是你的谁,我是你的剑";
                        int i=str.indexOf("你");
                                   System.out.println(i);

            9.找到上面 8 题的 最后一次出现 "你" 的位置,然后再从 第4个位置开始找  第一次出现的"你"
             String str="我是你的谁,我是你的剑";
             int i=0,j=0;
             while(str[i]!=0){
                if(str[i]=="你")j=i;
                i++;
             }
              System.out.println(j);
              System.out.println(str.indexOf("你",3));



            10."我是你的谁,我是你的剑"  从指定位置开始截取长度;从指定位置开始截取到指定位置结束长度的字符串
            String str="我是你的谁,我是你的剑";
            String str2 = sb.substring(0,2);

            11." 我是你的谁,我是你的剑 " 去除字符串左右空格
            String str="我是你的谁,我是你的剑";
            str.trim();



            12. "我是你的谁,我是你的剑"  替代字符串里面的"谁",改为"被子"
            String str="我是你的谁,我是你的剑";
                        str.replace("谁","被子");
            13."我是你的谁,我是你的剑"  替换该字符串的所有的 "你" 改为 "哈"
            String str="我是你的谁,我是你的剑";
                                    str.replace("你","哈");
            14. 比较 "avabc" 和 "avab" 字符串
             String str1="avabc";
                        String str2="avab";
                        if(str1.compareTo(str2)) System.out.println("相等");
                        else System.out.println("不相等");



            15. 将字符数组转换成 字符串输出
            char a[]="abcd";
                         String str=new String(a);
                                    System.out.println(str);

            16. 将字节数组以指定的编码格式转换成字符串，再转换后的字符串以指定的编码格式转换成字节数组
            byte[] byteArray = new byte[] {3,7,9,16,2};
            int length = 0;
            length = byteArray.length;
            for (int i = 0; i < length; i++) {
            System.out.println("byteArray[" + i + "]=" + byteArray[i]);
            }
            length = byteArray.length;

            String str = new String(byteArray, "UTF-8");
            System.out.println("str=" + str);
            byte b[] = str.getBytes("UTF-8");
            int len = b.length;
            for (int i = 0; i < len; i++) {
            System.out.println("b[" + i + "]=" + b[i]);




          作业2: 自己对比 String  StringBuffer  StringBuilder的区别  以代码和文字叙述的方式
                     在演示StringBuffer的时候 最好是基本数据类型和引用数据类型一起使用


           每次对String的操作都会生成新的String对象，这样不仅效率低下，而且大量浪费有限的内存空间

           当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。

           和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。

           StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。

           由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。

            1）字符修改上的区别（主要，见上面分析）

            （2）初始化上的区别，String可以空赋值，后者不行，报错

            ①String

            String s = null;

            String s = “abc”;

            ②StringBuffer

            StringBuffer s = null; //结果警告：Null pointer access: The variable result can only be null at this location

            StringBuffer s = new StringBuffer();//StringBuffer对象是一个空的对象

            StringBuffer s = new StringBuffer(“abc”);//创建带有内容的StringBuffer对象,对象的内容就是字符串”



          作业3: 求任意两个数之间的随机数
          public static int getRandom(int min, int max){
              Random random = new Random();
              int i = random.nextInt(max) % (max - min + 1) + min;
              return i;
          }



          作业4: 斗地主  需求:三人斗地主   四种花色  每种花色13张牌  大小王  地主20张  农民17张
            每一次重新启动程序   所有的牌都会被重洗
            要求:在控制台打印农民和地主的所有的牌

	        //准备花色
		ArrayList<String> color = new ArrayList<String>();
		color.add("♠");
		color.add("♥");
		color.add("♦");
		color.add("♣");

		//准备数字
		ArrayList<String> number = new ArrayList<String>();
        Collections.addAll(number,"3","4","5","6","7","8","9","10","J","Q","K","A","2");

		//定义一个map集合：用来将数字与每一张牌进行对应
		HashMap<Integer, String> map = new HashMap<Integer, String>();

		int index = 0;
		for (String thisNumber : number) {
			for (String thisColor : color) {
				map.put(index++, thisColor+thisNumber);
			}
		}

		//加入大小王
		map.put(index++, "小王");
		map.put(index++, "大王");

                //一副54张的牌 ArrayList里边为0-53的数的新牌
		ArrayList<Integer> cards = new ArrayList<Integer>();

		for (int i = 0; i <= 53; i++) {
			cards.add(i);
		}

		//洗牌
		Collections.shuffle(cards);
        //发牌，将每个人以及底牌设计为ArrayList<String>，将最后三张牌直接存放于底牌，剩余牌通过对3取模依次发牌。存放的过程要求数字大小与斗地主规则大小对应。

		//创建三个玩家和底牌
		ArrayList<Integer> iPlayer = new ArrayList<Integer>();
		ArrayList<Integer> iPlayer2 = new ArrayList<Integer>();
		ArrayList<Integer> iPlayer3 = new ArrayList<Integer>();


		//遍历这副洗好的牌，遍历过程中，将牌发到三个玩家和底牌中
		for (int i = 0; i < cards.size(); i++) {

				if(i%3==0) {
					iPlayer.add(cards.get(i));
				}else if(i%3==1) {
					iPlayer2.add(cards.get(i));
				}else {
					iPlayer3.add(cards.get(i));
				}

		}
		        ArrayList<String> sPlayer = new ArrayList<String>();
        		ArrayList<String> sPlayer2 = new ArrayList<String>();
        		ArrayList<String> sPlayer3 = new ArrayList<String>();
        		ArrayList<String> sCards = new ArrayList<String>();

        		for (Integer key : iPlayer) {
        			sPlayer.add(map.get(key));
        		}
        		for (Integer key : iPlayer2) {
        			sPlayer2.add(map.get(key));
        		}
        		for (Integer key : iPlayer3) {
        			sPlayer3.add(map.get(key));
        		}
        		for (Integer key : itCards) {
        			sCards.add(map.get(key));
        		}

        		//看牌
        		System.out.println("玩家一"+sPlayer);
        		System.out.println("玩家二"+sPlayer2);
        		System.out.println("玩家三"+sPlayer3);
        		System.out.println("底牌"+sCards);






          作业5: 在控制台上显示时间倒计时  例如: 距离2020年5月1日还有几天几个小时几分钟几秒





          作业6: 请计算出自己的出生年月日距离现在已经过去了多少天
            1997年5月2号     2020年4月25号  过去了多少天



                           Scanner sc=new Scanner();
                           System.out.println("请输入生日（如1997-5-2）：")
                           String birth=sc.next(System.in);
                           SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");

                           Date date1 = sdf.parse(birth);
                           Calendar date2 = Calendar.getInstance();




                           Calendar cal1 = Calendar.getInstance();
                           cal1.setTime(date1);

                           Calendar cal2 = Calendar.getInstance();
                           cal2.setTime(date2);
                           int day1= cal1.get(Calendar.DAY_OF_YEAR);
                           int day2 = cal2.get(Calendar.DAY_OF_YEAR);

                           int year1 = cal1.get(Calendar.YEAR);
                           int year2 = cal2.get(Calendar.YEAR);
                           if(year1 != year2)   //不同一年
                           {
                               int timeDistance = 0 ;
                               for(int i = year1 ; i < year2 ; i ++)
                               {
                                   if(i%4==0 && i%100!=0 || i%400==0)    //闰年
                                   {
                                       timeDistance += 366;
                                   }
                                   else    //不是闰年
                                   {
                                       timeDistance += 365;
                                   }
                               }

                               return timeDistance + (day2-day1) ;
                           }
                           else    //同一年
                           {
                               System.out.println("判断day2 - day1 : " + (day2-day1));
                               return day2-day1;
                           }


  */
```
